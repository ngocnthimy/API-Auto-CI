{
	"info": {
		"_postman_id": "98e47109-85b5-4d0a-8f0a-6f2ee709a2fa",
		"name": "1. API Auto Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13315104"
	},
	"item": [
		{
			"name": "Runner - Data driven Example",
			"item": [
				{
					"name": "Register new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const registerData = pm.iterationData.get(\"registerData\");",
									"const inTestEmail = registerData.email;",
									"const inTestPassword = registerData.password;",
									"",
									"//(OPTIONAL) Log the inTestEmail and inTestPassword in console to check if they are extracted correctly from our Data File",
									"console.log(`inTestEmail: [${inTestEmail}] | inTestPassword: [${inTestPassword}]`)",
									"",
									"//Store them to use in Tests",
									"pm.variables.set(\"email\", inTestEmail); ",
									"pm.variables.set(\"password\", inTestPassword); ",
									"",
									"const verificationData = pm.iterationData.get(\"verificationData\");",
									"const verificationMessage = verificationData.message;",
									"const expectedResponseCode = verificationData.expectedResponseCode;",
									"const expectResponseToContain = verificationData.expectResponseToContain;",
									"",
									"",
									"//(OPTIONAL) Log the verifycationMessage, expectedResponseCode and expectResponseToContain in console to check if they are extracted correctly from our Data File",
									"console.log(`verificationMessage: [${verificationMessage}] | expectedResponseCode: [${expectedResponseCode}] | expectResponseToContain: [${expectResponseToContain}]`)",
									"",
									"//Store them to use in Tests",
									"pm.variables.set(\"verificationMessage\", verificationMessage)",
									"pm.variables.set(\"expectedResponseCode\", expectedResponseCode)",
									"pm.variables.set(\"expectResponseToContain\", expectResponseToContain)",
									"",
									"//Form request body AKA payload",
									"const payload = JSON.stringify({",
									"    email: inTestEmail,",
									"    password: inTestPassword",
									"})",
									"",
									"//(OPTIONAL) Log the formed payload in console to check if it's what we want to form",
									"console.log(`Payload: ${payload}`);",
									"",
									"//Set the payload to \"body\" variable and use it in Body tab",
									"pm.variables.set(\"body\", payload);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.json()",
									"",
									"pm.test(`${pm.variables.get(\"verificationMessage\")} email: [${pm.variables.get(\"email\")}] | password: [${pm.variables.get(\"password\")}]`, () => {",
									"    pm.response.to.have.status(pm.variables.get(\"expectedResponseCode\"));",
									"})",
									"",
									"pm.test(`Verify Response status code is [${pm.variables.get(\"expectedResponseCode\")}] and Response body contains [${pm.variables.get(\"expectResponseToContain\")}]`, () => {",
									"    pm.expect(JSON.stringify(resBody)).to.contain(pm.variables.get(\"expectResponseToContain\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Runner - Data-driven Real case",
			"item": [
				{
					"name": "1. createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"const reponseStatusCode = pm.response.code;\r",
									"\r",
									"pm.test(`Verify response status code is  [${pm.variables.get(\"expectedCreateUserResponseCode\")}] and contains message: [${pm.variables.get(\"expectedMessage\")}]`, function () {\r",
									"    pm.expect(reponseStatusCode).to.equal(pm.variables.get(\"expectedCreateUserResponseCode\"));\r",
									"});\r",
									"\r",
									"pm.test(`Verify Response body contains message: [${pm.variables.get(\"expectedMessage\")}]`, function () {\r",
									"    pm.expect(JSON.stringify(responseData)).to.contains(pm.variables.get(\"expectedMessage\"))\r",
									"    if(!JSON.stringify(responseData).includes('failureMessage')) {\r",
									"        pm.variables.set(\"evToken\", responseData.CreateUserResponseMessage.accessToken);\r",
									"\r",
									"        pm.test(\"Verify that refreshToken is present and not empty\", function () {  \r",
									"            pm.expect(responseData).to.have.property('CreateUserResponseMessage');\r",
									"            pm.expect(responseData.CreateUserResponseMessage).to.have.property('refreshToken').that.is.not.empty;\r",
									"        });\r",
									"        pm.test(\"AccessToken is not empty if request \", function () {\r",
									"            pm.expect(responseData.CreateUserResponseMessage.accessToken).to.exist.and.to.not.be.empty;\r",
									"        });\r",
									"    } else {\r",
									"        pm.variables.set(\"evToken\", null);\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const spAccountID = \"offer\" + _.random(100000,999999);\r",
									"// let { email } = pm.iterationData.get(\"createUserData\");\r",
									"// const { expectedCreateUserResponseCode } = pm.iterationData.get(\"createUserData\");\r",
									"\r",
									"// Extract email and expectedCreateUserResponseCode, expectedMessage from Data file > createUserData object\r",
									"const createUserData = pm.iterationData.get(\"createUserData\");\r",
									"let email = createUserData.email;\r",
									"const expectedCreateUserResponseCode = createUserData.expectedCreateUserResponseCode;\r",
									"const expectedMessage = createUserData.expectedMessage;\r",
									"\r",
									"//Log the extracted email and expectedCreateUserResponseCode\r",
									"console.log(`email: ${email} | expectedCreateUserResponseCode: ${expectedCreateUserResponseCode}`)\r",
									"if(email === \"random\") {\r",
									"    email = spAccountID + \"@gmail.com\";\r",
									"} else {\r",
									"    email = \"invalidEmail@email@\";\r",
									"}\r",
									"//Log the actual email\r",
									"console.log(`Actual Email: ${email}`)\r",
									"\r",
									"//Set the spAccountId and expectedCreateUserResponseCode for later usage\r",
									"pm.variables.set(\"spAccountId\", spAccountID);\r",
									"pm.variables.set(\"expectedCreateUserResponseCode\", expectedCreateUserResponseCode);\r",
									"pm.variables.set(\"expectedMessage\", expectedMessage);\r",
									"\r",
									"//Prepare the payload(Request body)\r",
									"const payload = JSON.stringify({\r",
									"  CreateUserRequestMessage: {\r",
									"    channelPartnerID: \"SHAHID\",\r",
									"    apiKey: \"8uMMWK58TY2fGjJS\",\r",
									"    dmaId: \"JO\",\r",
									"    email: email,\r",
									"    spAccountID: spAccountID,\r",
									"    country: \"JO\",\r",
									"    firstName: \"Shahid\",\r",
									"    lastName: \"Afridi\",\r",
									"    isEmailVerified: true,\r",
									"    ipAddress: \"45.45.1.212\"\r",
									"  }\r",
									"});\r",
									"console.log(payload)\r",
									"//set the body into 'body' variable and call it back in Body tab\r",
									"pm.variables.set(\"body\", payload)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{body}}"
						},
						"url": {
							"raw": "https://rest-dev-shahid.evergent.com/shahid/createUser",
							"protocol": "https",
							"host": [
								"rest-dev-shahid",
								"evergent",
								"com"
							],
							"path": [
								"shahid",
								"createUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. addSubscription - Credit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.text();\r",
									"\r",
									"pm.test(`Verify response status code is  ${pm.variables.get(\"expectedAddSubscriptionResponseCode\")}`, function () {\r",
									"    pm.expect(pm.response.code).to.equal(pm.variables.get(\"expectedAddSubscriptionResponseCode\"));\r",
									"});\r",
									"\r",
									"pm.test(`The response should contain message: ${pm.variables.get(\"expectedMessage\")}`, function () {\r",
									"    pm.expect(resBody).to.contains(pm.variables.get(\"expectedAddSubscriptionMessage\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const addSubscriptionData = pm.iterationData.get(\"addSubscriptionData\");",
									"const countryWithoutTerritory = addSubscriptionData.countryWithoutTerritory",
									"const paymentLabel = addSubscriptionData.paymentLabel;",
									"const serviceID = addSubscriptionData.serviceID;",
									"",
									"const expectedAddSubscriptionResponseCode = addSubscriptionData.expectedAddSubscriptionResponseCode;",
									"const expectedAddSubscriptionMessage = addSubscriptionData.expectedMessage;",
									"",
									"",
									"console.log(`countryWithoutTerritory: ${countryWithoutTerritory} | paymentLabel: ${paymentLabel} | expectedAddSubscriptionResponseCode: ${expectedAddSubscriptionResponseCode}`)",
									"",
									"pm.variables.set(\"expectedAddSubscriptionResponseCode\", expectedAddSubscriptionResponseCode)",
									"pm.variables.set(\"expectedAddSubscriptionMessage\", expectedAddSubscriptionMessage)",
									"",
									"const payload = JSON.stringify({",
									"  \"AddSubscriptionRequestMessage\": {",
									"    apiKey: \"8uMMWK58TY2fGjJS\",",
									"    dmaID: countryWithoutTerritory,",
									"    serviceType: \"PRODUCT\",",
									"    serviceID: serviceID,",
									"    quantity: \"1\",",
									"    promotionID: \"\",",
									"    currency: \"IQD\",",
									"    paymentmethodInfo: {",
									"      label: paymentLabel,",
									"      makeAutoPayment: true,",
									"      CardTokenInfoMessage: {",
									"        paymentMethodID: \"4324733\"",
									"      },",
									"    transactionReferenceMsg: {",
									"        amount: \"1.49\",",
									"        txID: \"45497543947\",",
									"        txMsg: \"Success\"",
									"      }",
									"    }",
									"  }",
									"});",
									"",
									"pm.variables.set(\"body\", payload);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{evToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{body}}"
						},
						"url": {
							"raw": "https://rest-dev.evergent.com/shahid/addSubscription",
							"protocol": "https",
							"host": [
								"rest-dev",
								"evergent",
								"com"
							],
							"path": [
								"shahid",
								"addSubscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. getActiveSubscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.text();\r",
									"\r",
									"pm.test(`Verify response status code is  ${pm.variables.get(\"expectedGetActiveSubscriptionsResponseCode\")}`, function () {\r",
									"    pm.expect(pm.response.code).to.equal(pm.variables.get(\"expectedGetActiveSubscriptionsResponseCode\"));\r",
									"});\r",
									"\r",
									"pm.test(`The response should contain message: ${pm.variables.get(\"expectedGetActiveSubscriptionMessage\")}`, function () {\r",
									"    pm.expect(resBody).to.contains(pm.variables.get(\"expectedGetActiveSubscriptionMessage\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getActiveSubscriptionData = pm.iterationData.get(\"getActiveSubscriptionData\");",
									"const expectedGetActiveSubscriptionMessage = getActiveSubscriptionData.expectedMessage;",
									"const expectedGetActiveSubscriptionsResponseCode = getActiveSubscriptionData.expectedGetActiveSubscriptionsResponseCode;",
									"",
									"console.log(`expectedGetActiveSubscriptionMessage: ${expectedGetActiveSubscriptionMessage} | expectedGetActiveSubscriptionsResponseCode: ${expectedGetActiveSubscriptionsResponseCode}`)",
									"",
									"pm.variables.set(\"expectedGetActiveSubscriptionMessage\", expectedGetActiveSubscriptionMessage)",
									"pm.variables.set(\"expectedGetActiveSubscriptionsResponseCode\", expectedGetActiveSubscriptionsResponseCode)",
									"",
									"const payload = JSON.stringify({",
									"  GetActiveSubscriptionsRequestMessage: {",
									"    channelPartnerID: \"SHAHID\",",
									"    apiKey: \"8uMMWK58TY2fGjJS\",",
									"    spAccountID: pm.variables.get(\"spAccountID\"),",
									"    country: \"JO\"",
									"  }",
									"});",
									"",
									"pm.variables.set(\"body\", payload);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{evToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{body}}"
						},
						"url": {
							"raw": "https://rest-dev-shahid.evergent.com/shahid/getActiveSubscriptions",
							"protocol": "https",
							"host": [
								"rest-dev-shahid",
								"evergent",
								"com"
							],
							"path": [
								"shahid",
								"getActiveSubscriptions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}